# This called workflow builds a docker container, targeting the "app" stage and pushes the image to Docker Hub.

name: Build and push app

on:
  workflow_call:
    inputs:
      path_to_context:
        required: true
        type: string
      dockerfile_name:
        default: Dockerfile
        required: false
        type: string
    secrets:
      docker_hub_username:
        required: true
      docker_hub_access_token:
        required: true

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Repo  # each job runs in an isolated environment, so need to check out the repo in each job
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers  # also need to set up the cache in each job, using the same prefix (here ${{ runner.os }}-buildx) makes it sharable between jobs
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.docker_hub_username }}
          password: ${{ secrets.docker_hub_access_token }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./test_python_example
          file: ./test_python_example/Dockerfile
          target: app
          push: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new # mode=max means export layers from all stage to cache
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/test_python_example:latest

      - name: Move cache # apparently prevents the cache from growing in size forever
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

